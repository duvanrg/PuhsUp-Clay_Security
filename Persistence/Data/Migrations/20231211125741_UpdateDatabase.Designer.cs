// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20231211125741_UpdateDatabase")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Categoriaper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreCat")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("categoriaper", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("DepId")
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreCiu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DepId" }, "DepId");

                    b.ToTable("ciudad", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contactoper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TcontactoId")
                        .HasColumnType("int(11)")
                        .HasColumnName("TContactoId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Descripcion" }, "Descripcion")
                        .IsUnique();

                    b.HasIndex(new[] { "PersonaId" }, "PersonaId");

                    b.HasIndex(new[] { "TcontactoId" }, "TContactoId");

                    b.ToTable("contactoper", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int(11)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int(11)");

                    b.Property<int>("EstatoId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("FechaContrato")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClienteId" }, "ClienteId");

                    b.HasIndex(new[] { "EmpleadoId" }, "EmpleadoId");

                    b.HasIndex(new[] { "EstatoId" }, "EstatoId");

                    b.ToTable("contrato", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("NombreDep")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PaisId" }, "PaisId");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Dirpersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TdireccionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("TDireccionId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PersonaId" }, "PersonaId")
                        .HasDatabaseName("PersonaId1");

                    b.HasIndex(new[] { "TdireccionId" }, "TDireccionId");

                    b.ToTable("dirpersona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("estado", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("NombrePais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CatId")
                        .HasColumnType("int(11)");

                    b.Property<int>("CiudadId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DateReg")
                        .HasColumnType("date");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int(11)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TpersonaId")
                        .HasColumnType("int(11)")
                        .HasColumnName("TPersonaId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CatId" }, "CatId");

                    b.HasIndex(new[] { "CiudadId" }, "CiudadId");

                    b.HasIndex(new[] { "IdPersona" }, "IdPersona")
                        .IsUnique();

                    b.HasIndex(new[] { "TpersonaId", "CatId", "CiudadId" }, "TPersonaId");

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Programacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int(11)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TurnoId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContratoId" }, "ContratoId");

                    b.HasIndex(new[] { "EmpleadoId" }, "EmpleadoId")
                        .HasDatabaseName("EmpleadoId1");

                    b.HasIndex(new[] { "TurnoId" }, "TurnoId");

                    b.ToTable("programacion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tipocontacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipocontacto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tipodireccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipodireccion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tipopersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipopersona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("HoraTurnoF")
                        .HasColumnType("date");

                    b.Property<DateTime>("HoraTurnoI")
                        .HasColumnType("date");

                    b.Property<string>("NombreTurno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("turnos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.HasOne("Domain.Entities.Departamento", "Dep")
                        .WithMany("Ciudads")
                        .HasForeignKey("DepId")
                        .IsRequired()
                        .HasConstraintName("ciudad_ibfk_1");

                    b.Navigation("Dep");
                });

            modelBuilder.Entity("Domain.Entities.Contactoper", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("Contactopers")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contactoper_ibfk_1");

                    b.HasOne("Domain.Entities.Tipocontacto", "Tcontacto")
                        .WithMany("Contactopers")
                        .HasForeignKey("TcontactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contactoper_ibfk_2");

                    b.Navigation("Persona");

                    b.Navigation("Tcontacto");
                });

            modelBuilder.Entity("Domain.Entities.Contrato", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Cliente")
                        .WithMany("ContratoClientes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contrato_ibfk_1");

                    b.HasOne("Domain.Entities.Persona", "Empleado")
                        .WithMany("ContratoEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contrato_ibfk_2");

                    b.HasOne("Domain.Entities.Estado", "Estato")
                        .WithMany("Contratos")
                        .HasForeignKey("EstatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contrato_ibfk_3");

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");

                    b.Navigation("Estato");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.HasOne("Domain.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("departamento_ibfk_2");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Domain.Entities.Dirpersona", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("Dirpersonas")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dirpersona_ibfk_1");

                    b.HasOne("Domain.Entities.Tipodireccion", "Tdireccion")
                        .WithMany("Dirpersonas")
                        .HasForeignKey("TdireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dirpersona_ibfk_2");

                    b.Navigation("Persona");

                    b.Navigation("Tdireccion");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.HasOne("Domain.Entities.Categoriaper", "Cat")
                        .WithMany("Personas")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("persona_ibfk_4");

                    b.HasOne("Domain.Entities.Ciudad", "Ciudad")
                        .WithMany("Personas")
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("persona_ibfk_2");

                    b.HasOne("Domain.Entities.Tipopersona", "Tpersona")
                        .WithMany("Personas")
                        .HasForeignKey("TpersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("persona_ibfk_3");

                    b.Navigation("Cat");

                    b.Navigation("Ciudad");

                    b.Navigation("Tpersona");
                });

            modelBuilder.Entity("Domain.Entities.Programacion", b =>
                {
                    b.HasOne("Domain.Entities.Contrato", "Contrato")
                        .WithMany("Programacions")
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("programacion_ibfk_2");

                    b.HasOne("Domain.Entities.Persona", "Empleado")
                        .WithMany("Programacions")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("programacion_ibfk_1");

                    b.HasOne("Domain.Entities.Turno", "Turno")
                        .WithMany("Programacions")
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("programacion_ibfk_3");

                    b.Navigation("Contrato");

                    b.Navigation("Empleado");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("Domain.Entities.Categoriaper", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.Contrato", b =>
                {
                    b.Navigation("Programacions");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudads");
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Navigation("Contactopers");

                    b.Navigation("ContratoClientes");

                    b.Navigation("ContratoEmpleados");

                    b.Navigation("Dirpersonas");

                    b.Navigation("Programacions");
                });

            modelBuilder.Entity("Domain.Entities.Tipocontacto", b =>
                {
                    b.Navigation("Contactopers");
                });

            modelBuilder.Entity("Domain.Entities.Tipodireccion", b =>
                {
                    b.Navigation("Dirpersonas");
                });

            modelBuilder.Entity("Domain.Entities.Tipopersona", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.Turno", b =>
                {
                    b.Navigation("Programacions");
                });
#pragma warning restore 612, 618
        }
    }
}
